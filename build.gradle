plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

group = project.maven_group
version = "${generateVersion()}+minecraft-${libs.versions.minecraft.get()}"

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://maven.shedaniel.me/" } // cloth config
	maven { url = "https://maven.terraformersmc.com/releases/" } // modmenu
}

dependencies {
	minecraft libs.minecraft
	// mappings loom.officialMojangMappings()
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.fabric.loader
	modImplementation libs.bundles.fabric.api

	modApi libs.modmenu
	modApi libs.cloth.config

	include libs.toml4j
	modImplementation libs.toml4j
}

processResources {
	inputs.property "version", generateVersion()

	filesMatching("fabric.mod.json") {
		expand "version": generateVersion()
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = "UTF-8"

	it.options.compilerArgs += ["-Xlint:deprecation"]
}

jar {
	from("LICENSE") {
		rename { "${it}-${project.archives_base_name}.txt"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

def generateVersion() {
	var version = project.mod_version;
	// NOTE: To create a release jar run `./gradlew build -Prelease=true`
	return project.hasProperty("release") ? version : version + "-alpha";
}
